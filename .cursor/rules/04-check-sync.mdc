# Check Synchronization Standards

## Overview

This rule defines the standards for checking synchronization between documentation examples, example files, and tests across all modules. It ensures that every documented example has corresponding implementations in both the example file and test file.

## Core Synchronization Principles

### 1. Three-Way Synchronization Requirement

- **Documentation examples** - Must exist in TSDoc `@example` tags.
- **Example file functions** - Must exist in `examples/module-example.ts`.
- **Test implementations** - Must exist in `tests/module.spec.ts`.
- **All three must be perfectly synchronized** - Same codes, descriptions, and logic.

### 2. Unique Code Standards

- **Every example must have a unique code** in format `module:sequential_number`.
- **Codes must be sequential** - No gaps in numbering (e.g., `event-001`, `event-002`, `event-003`).
- **Codes must be consistent** across all three locations.
- **Descriptions must match exactly** across all three locations.

### 3. Synchronization Checklist

#### Coverage Verification

- [ ] All documented examples have corresponding example file functions.
- [ ] All documented examples have corresponding test implementations.
- [ ] All example file functions have corresponding documentation examples.
- [ ] All example file functions have corresponding test implementations.
- [ ] All test implementations have corresponding documentation examples.
- [ ] All test implementations have corresponding example file functions.

#### Code Consistency Verification

- [ ] Unique codes are identical across all three locations.
- [ ] Descriptions are identical across all three locations.
- [ ] No duplicate codes within the same module.
- [ ] No missing codes in the sequence.

#### Content Synchronization Verification

- [ ] Code logic in tests matches code logic in documentation.
- [ ] Code logic in tests matches code logic in example files.
- [ ] Code logic in example files matches code logic in documentation.
- [ ] Variable names and values are consistent across all three locations.

## Synchronization Check Process

### Step 1: Extract All Example Codes

```bash
# Extract from documentation
grep -o "module-[0-9]*:" src/module.ts | sort | uniq -c

# Extract from example file
grep -o "module-[0-9]*:" examples/module-example.ts | sort | uniq -c

# Extract from test file
grep -o "module-[0-9]*:" tests/module.spec.ts | sort | uniq -c
```

### Step 2: Verify Coverage

Create a comparison table:

| Code | Documentation | Example | Test |
|------|---------------|---------|------|
| module-001 | ✅ | ✅ | ✅ |
| module-002 | ✅ | ✅ | ✅ |
| module-003 | ✅ | ✅ | ✅ |
| ... | ... | ... | ... |

### Step 3: Verify Descriptions

Check that descriptions match exactly:

```bash
# Check specific example description
grep "module-001:" src/module.ts
grep "module-001:" examples/module-example.ts
grep "module-001:" tests/module.spec.ts
```

### Step 4: Verify Code Logic

Compare the actual code implementation across all three locations to ensure they match exactly.

## Common Synchronization Issues

### Issue 1: Missing Examples

**Problem**: Example exists in documentation but not in example file or tests.
**Solution**: Add the missing implementation to both example file and test file.

### Issue 2: Inconsistent Descriptions

**Problem**: Same code has different descriptions across locations.
**Solution**: Standardize the description to be identical across all three locations.

### Issue 3: Code Logic Mismatch

**Problem**: Same example has different code logic across locations.
**Solution**: Ensure the code logic is identical across all three locations.

### Issue 4: Duplicate Codes

**Problem**: Same code appears multiple times within the same module.
**Solution**: Remove duplicates and ensure each code appears exactly once in each location.

### Issue 5: Gaps in Sequence

**Problem**: Missing numbers in the sequential numbering.
**Solution**: Either fill the gap or renumber to maintain sequential order.

## Synchronization Quality Checklist

### Coverage Checklist

- [ ] All documented examples have corresponding example file functions.
- [ ] All documented examples have corresponding test implementations.
- [ ] All example file functions have corresponding documentation examples.
- [ ] All example file functions have corresponding test implementations.
- [ ] All test implementations have corresponding documentation examples.
- [ ] All test implementations have corresponding example file functions.

### Consistency Checklist

- [ ] Unique codes are identical across all three locations.
- [ ] Descriptions are identical across all three locations.
- [ ] No duplicate codes within the same module.
- [ ] No missing codes in the sequence.
- [ ] Code logic matches across all three locations.
- [ ] Variable names and values are consistent.

### Content Checklist

- [ ] Code logic in tests matches code logic in documentation.
- [ ] Code logic in tests matches code logic in example files.
- [ ] Code logic in example files matches code logic in documentation.
- [ ] Variable names and values are consistent across all three locations.
- [ ] Expected outputs are consistent across all three locations.

## Module-Specific Synchronization Commands

### For Any Module

```bash
# Navigate to the module directory
cd packages/core

# Extract all example codes from documentation
echo "=== DOCUMENTATION ==="
grep -o "module-[0-9]*:" src/module.ts | sort | uniq -c

# Extract all example codes from example file
echo "=== EXAMPLES ==="
grep -o "module-[0-9]*:" examples/module-example.ts | sort | uniq -c

# Extract all example codes from test file
echo "=== TESTS ==="
grep -o "module-[0-9]*:" tests/module.spec.ts | sort | uniq -c

# Check specific example synchronization
echo "=== CHECKING SPECIFIC EXAMPLE ==="
grep "module-001:" src/module.ts
grep "module-001:" examples/module-example.ts
grep "module-001:" tests/module.spec.ts
```

### Example: Trace Module Synchronization

```bash
# Navigate to core package
cd packages/core

# Check trace module synchronization
echo "=== TRACE MODULE SYNCHRONIZATION ==="

echo "Documentation examples:"
grep -o "trace-[0-9]*:" src/trace.ts | sort | uniq -c

echo "Example file functions:"
grep -o "trace-[0-9]*:" examples/trace-example.ts | sort | uniq -c

echo "Test implementations:"
grep -o "trace-[0-9]*:" tests/trace.spec.ts | sort | uniq -c
```

## Synchronization Standards Summary

### Required Synchronization

1. **Documentation** ↔ **Example File** ↔ **Test File**
2. **Unique Codes** must be identical across all three
3. **Descriptions** must be identical across all three
4. **Code Logic** must be identical across all three
5. **Sequential Numbering** must be continuous without gaps

### Quality Indicators

- ✅ **Perfect Synchronization**: All examples present in all three locations with identical codes, descriptions, and logic.
- ⚠️ **Partial Synchronization**: Examples present but with inconsistencies in codes, descriptions, or logic.
- ❌ **No Synchronization**: Missing examples or major inconsistencies.

### Maintenance Guidelines

- **When adding new examples**: Add to all three locations simultaneously.
- **When updating examples**: Update all three locations simultaneously.
- **When removing examples**: Remove from all three locations simultaneously.
- **Regular checks**: Run synchronization checks before committing changes.

## Key Synchronization Principles

- **Three-way consistency** - Documentation, examples, and tests must always be in sync.
- **Unique code standards** - Every example must have a unique, sequential code.
- **Description consistency** - Descriptions must be identical across all locations.
- **Code logic consistency** - Implementation must be identical across all locations.
- **Regular verification** - Always verify synchronization before considering work complete.
- **Complete coverage** - Every documented example must have corresponding implementations.
- **No gaps or duplicates** - Sequential numbering must be continuous and unique.
