---
alwaysApply: true
---

# Documentation and Examples Methodology

## Overview

This rule defines a pragmatic approach to documenting code with TSDoc examples and ensuring those examples are reflected in intelligent, maintainable unit tests.

## Core Principles

### 1. TSDoc Documentation Format

- **Always use TSDoc format** for function documentation.
- **Include practical examples** that demonstrate real-world usage.
- **Keep examples simple and concise** but comprehensive enough for most use cases.
- **Use clear, descriptive names** for examples that explain their purpose.

### 2. Simple and Concise Examples

- **Start with basic usage** - simple, straightforward examples.
- **Include common scenarios** - cover 80% of use cases.
- **Show error handling** - demonstrate how errors are handled.
- **Include TypeScript examples** - show type safety and inference.
- **Avoid overly complex examples** - focus on practical usage.

### 3. Intelligent Test Design

- **Design tests for maintainability** - avoid code duplication and long files.
- **Use shared test utilities** - create reusable test helpers.
- **Group related tests** - organize tests logically.
- **Keep test files focused** - one concept per test file when possible.
- **Use descriptive test names** that match example descriptions.

### 4. Unique Example Codes (MANDATORY)

- **Every example must have a unique code** in the format `module:sequential_number`.
- **Example codes must be consistent** between documentation and tests.
- **Descriptions must match exactly** between documentation and tests.

### 5. Module Agnostic Documentation

- **Document each module independently** - avoid assuming dependencies on other modules.
- **Use generic examples** - don't reference specific modules unless absolutely necessary.
- **Focus on the module's own capabilities** - document what the module does, not what it uses.
- **Avoid cross-module assumptions** - don't assume users will use complementary modules together.

### 6. Avoid Documentation Duplication

- **Document interfaces/types minimally** - focus on structure and purpose, not implementation details.
- **Document implementations comprehensively** - provide detailed examples in function documentation.
- **Use `@inheritDoc` for implementations** - reference interface documentation when appropriate.
- **Keep interface docs focused on contracts** - avoid duplicating implementation examples.

### 7. Clean Example Code

- **No console.log in examples** - if you want to express output, indicate it as a comment in the code.
- **Respect line length limits** - don't exceed the character limit based on the editor's ruler (e.g., 80, 100, 120 characters). Infer these lengths based on the codebase.

## TSDoc Tags Reference

Based on the [TSDoc specification](https://tsdoc.org/), here are the essential tags for our documentation:

### Core Documentation Tags

- **`@param`** - Document function parameters
- **`@returns`** - Document return values
- **`@example`** - Provide code examples (our primary focus)
- **`@remarks`** - Additional explanatory text
- **`@see`** - Reference related documentation

### Visibility and Stability Tags

- **`@public`** - Public API (default for exported members)
- **`@internal`** - Internal implementation details
- **`@alpha`** - Experimental API, may change
- **`@beta`** - Beta API, mostly stable
- **`@deprecated`** - Mark as deprecated
- **`@experimental`** - Experimental API

### Type Documentation Tags

- **`@typeParam`** - Document generic type parameters
- **`@defaultValue`** - Document default parameter values
- **`@readonly`** - Mark properties as read-only

### Inheritance and Override Tags

- **`@inheritDoc`** - Inherit documentation from base class/interface
- **`@override`** - Mark as overriding base implementation
- **`@virtual`** - Mark as virtual (can be overridden)
- **`@sealed`** - Mark as sealed (cannot be extended)

### Reference and Linking Tags

- **`@link`** - Create hyperlinks to other documentation
- **`@label`** - Provide alternative text for links
- **`@packageDocumentation`** - Mark package-level documentation

### Advanced Tags

- **`@decorator`** - Mark as decorator function
- **`@eventProperty`** - Mark as event property
- **`@throws`** - Document exceptions that may be thrown
- **`@privateRemarks`** - Internal notes for maintainers

## Implementation Guidelines

### TSDoc Documentation Standards

```typescript
/**
 * Brief description of what the function does.
 *
 * @param param1 - Description of first parameter.
 * @param param2 - Description of second parameter.
 * @returns Description of return value.
 *
 * @example
 * ```ts
 * // event-001: Basic usage with union types for maximum type safety.
 * const result = functionName('input');
 * // result: expected output.
 * ```
 *
 * @example
 * ```ts
 * // event-002: Error handling example.
 * const result = functionName('invalid');
 * if (isErr(result)) {
 *   // unwrap(result): error message.
 * }
 * ```
 *
 * @public
 */
```

### Example Code Format

- **Format**: `module:sequential_number`
- **Module**: The module name (e.g., `event`, `flow`, `pipe`)
- **Sequential Number**: Three-digit sequential number (e.g., `001`, `002`, `003`)
- **Examples**: `event-001`, `flow-002`, `pipe-003`

### Example Organization (Keep It Simple)

1. **Basic Example** - Simple functionality demonstration.
2. **Common Use Case** - Typical real-world scenario.
3. **Error Handling** - How errors are managed.
4. **TypeScript Example** - Type safety demonstration.

## Module Agnostic Documentation Guidelines

### Documenting Independent Modules

```typescript
// ✅ GOOD: Module agnostic documentation
/**
 * Validates string input according to specified rules.
 *
 * @param input - The string to validate.
 * @param rules - Validation rules to apply.
 * @returns Validation result.
 *
 * @example
 * ```ts
 * // schema-001: Basic string validation.
 * const result = validateString('test', { minLength: 3 });
 * // result: true.
 * ```
 */

// ❌ AVOID: Assuming other modules
/**
 * Validates string input using flow pipeline.
 *
 * @param input - The string to validate.
 * @returns Flow result with validation.
 *
 * @example
 * ```ts
 * // schema-001: Using flow for validation.
 * const pipeline = flow(
 *   validateString,
 *   transformResult
 * );
 * ```
 */
```

### Guidelines for Module Independence

- **Focus on the module's capabilities** - Document what the module does.
- **Use generic examples** - Don't assume specific module combinations.
- **Document interfaces minimally** - Focus on contracts, not implementations.
- **Avoid cross-module references** - Unless explicitly demonstrating integration.

## Avoiding Documentation Duplication

### Interface/Type Documentation (Minimal)

```typescript
/**
 * Configuration for validation rules.
 *
 * @public
 */
interface ValidationConfig {
  /** Minimum length requirement. */
  minLength?: number;
  /** Maximum length requirement. */
  maxLength?: number;
  /** Required pattern to match. */
  pattern?: RegExp;
}
```

### Implementation Documentation (Comprehensive)

```typescript
/**
 * Validates a string against the provided configuration.
 *
 * @param input - The string to validate.
 * @param config - Validation configuration.
 * @returns True if validation passes, false otherwise.
 *
 * @example
 * ```ts
 * // validation-001: Basic string validation.
 * const result = validateString('test', { minLength: 3 });
 * console.log(result); // true.
 * ```
 *
 * @example
 * ```ts
 * // validation-002: Complex validation with multiple rules.
 * const result = validateString('test123', {
 *   minLength: 5,
 *   maxLength: 10,
 *   pattern: /^[a-z0-9]+$/
 * });
 * console.log(result); // true.
 * ```
 *
 * @public
 */
function validateString(input: string, config: ValidationConfig): boolean {
  // Implementation details...
}
```

### Using @inheritDoc for Implementations

```typescript
/**
 * @inheritDoc
 *
 * @example
 * ```ts
 * // validation-003: Custom validation implementation.
 * const customValidator = new CustomValidator();
 * const result = customValidator.validate('input');
 * console.log(result); // validation result.
 * ```
 *
 * @public
 */
class CustomValidator implements Validator {
  // Implementation...
}
```

### Documentation Hierarchy Guidelines

1. **Interfaces/Types** - Document structure and contracts only.
2. **Abstract Classes** - Document common behavior and extension points.
3. **Concrete Implementations** - Document specific behavior and examples.
4. **Utility Functions** - Document usage patterns and examples.

## Intelligent Test Structure

### Test File Organization

```typescript
// Shared test utilities
const createTestHelpers = () => ({
  // Reusable test functions
});

describe('FunctionName', () => {
  const helpers = createTestHelpers();

  describe('Basic functionality', () => {
    it('should handle basic functionality', () => {
      // Test for basic API functionality.
    });
  });

  describe('Code examples', () => {
    it('should run example event-001: Basic usage with union types for maximum type safety', () => {
      // Exact copy of documentation example with assertions.
    });

    it('should run example event-002: Error handling example', () => {
      // Exact copy of documentation example with assertions.
    });
  });

  describe('Type safety', () => {
    it('should provide correct type inference', () => {
      // Typechecking tests.
    });
  });
});
```

### Test Design Principles

- **Use shared utilities** - Create reusable test helpers to avoid duplication.
- **Keep tests focused** - One concept per test file when possible.
- **Use descriptive names** - Test names should clearly describe what they're testing.
- **Include typechecking** - Always validate TypeScript support in tests.
- **Test error cases** - Don't just test success scenarios.
- **Use unwrap for Results** - Always use `unwrap(result)` to validate Result types.

### Code Examples Section Structure

The **Code examples** section contains ALL examples from the module's documentation (tsdoc `@example` tags) in a flat structure, ordered by their unique codes. This eliminates artificial categorization and makes examples easier to find and maintain.

## Specific Rules for Different Function Types

### Classic Functions (No Error Handling)

```typescript
/**
 * @example
 * ```ts
 * // pipe-001: Simple function composition.
 * const pipeline = pipe(
 *   (x: number) => x + 1,
 *   (x: number) => x * 2
 * );
 * const result = pipeline(5); // 12.
 * ```
 */
```

### Result-Based Functions (With Error Handling)

```typescript
/**
 * @example
 * ```ts
 * // flow-001: Result pipeline with error handling.
 * const result = functionName('input');
 * if (isOk(result)) {
 *   // unwrap(result): success value.
 * } else {
 *   // unwrap(result): error value.
 * }
 * ```
 */
```

## Result Validation Guidelines

### Using unwrap for Result Validation

When testing functions that return `Result<T, E>`, always use `unwrap(result)` for assertions:

```typescript
// For success cases.
const result = functionName('valid input');
expect(unwrap(result)).toEqual(expectedValue);

// For error cases.
const errorResult = functionName('invalid input');
expect(unwrap(errorResult)).toEqual(expectedError);
```

## Quality Assurance Checklist

### Documentation Quality

- [ ] Examples use TSDoc format.
- [ ] Examples are simple and concise.
- [ ] Examples cover common use cases.
- [ ] Examples show both success and error scenarios.
- [ ] Examples demonstrate TypeScript features.
- [ ] Every example has a unique code (module:sequential_number).
- [ ] All comments end with a period.
- [ ] Documentation is module agnostic.
- [ ] No cross-module assumptions in examples.
- [ ] Interface/type documentation is minimal and focused.
- [ ] No console.log in examples - use comments for expected output.
- [ ] Respect line length limits based on codebase standards.

### Test Quality

- [ ] Tests match documentation examples exactly.
- [ ] Tests use shared utilities to avoid duplication.
- [ ] Tests include typechecking with `expectTypeOf`.
- [ ] Tests cover error cases for result-based functions.
- [ ] Tests use `unwrap(result)` for Result validation.
- [ ] Test descriptions match documentation exactly.
- [ ] Test files are focused and maintainable.

### Synchronization Quality

- [ ] All documented examples have corresponding tests.
- [ ] Test names match example descriptions.
- [ ] Code in tests matches code in documentation.
- [ ] Unique codes are consistent between documentation and tests.

## Common Patterns

### Basic Function Example

```typescript
// Documentation.
/**
 * @example
 * ```ts
 * // event-001: Basic usage with union types for maximum type safety.
 * const result = functionName('input');
 * // result: expected output.
 * ```
 */

// Test.
it('should run example event-001: Basic usage with union types for maximum type safety', () => {
  const result = functionName('input');
  expect(result).toBe('expected output');

  // Typechecking.
  expectTypeOf(functionName).toBeFunction();
  expectTypeOf(result).toBeString();
});
```

### Result Function Example

```typescript
// Documentation.
/**
 * @example
 * ```ts
 * // flow-001: Result pipeline with error handling.
 * const result = functionName('input');
 * if (isOk(result)) {
 *   // unwrap(result): success value.
 * } else {
 *   // unwrap(result): error value.
 * }
 * ```
 */

// Test.
it('should run example flow-001: Result pipeline with error handling', () => {
  const result = functionName('input');

  if (isOk(result)) {
    expect(unwrap(result)).toBe('success value');
  } else {
    expect(unwrap(result)).toBe('error value');
  }

  // Typechecking.
  expectTypeOf(functionName).toBeFunction();
  expectTypeOf(result).toEqualTypeOf<Result<string, string>>();
});
```

## Maintenance Guidelines

### When Adding New Examples

1. **Assign unique code** (e.g., `event-003`, `flow-004`).
2. **Add to TSDoc documentation** with clear description and code.
3. **Create corresponding test** with exact same code and description.
4. **Use shared utilities** to avoid code duplication.
5. **Verify test passes** and matches documented behavior.
6. **Ensure module agnostic** - don't assume other modules.

### When Updating Documentation

1. **Update the TSDoc example** in function documentation.
2. **Update corresponding test** to match exactly.
3. **Verify tests pass** with new behavior.
4. **Maintain unique codes** - do not reuse codes.
5. **Check module independence** - ensure no cross-module assumptions.

### When Removing Examples

1. **Remove from TSDoc documentation** completely.
2. **Remove corresponding test** completely.
3. **Verify remaining tests** still pass.

## Repository-Specific Testing Commands

### Important: Always Check vitest.config.ts First

Before running tests, **always review the targets in the `vitest.config.ts` file** of each package to understand the available test projects and their configurations.

### Core Package Testing

```bash
# Navigate to the core package.
cd packages/core

# Run tests for specific project with typechecking and coverage.
pnpm test:project flow
```

### Command Options Explained

- `--project [name]` - Run tests for specific project defined in vitest.config.ts.
- `--typecheck` - Enable TypeScript type checking during tests.
- `--hideSkippedTests` - Hide skipped tests from output.
- `--bail 1` - Stop on first test failure.
- `--coverage` - Generate coverage report.

## Key Takeaways

- **Use TSDoc format** - Always document with TSDoc for consistency.
- **Keep examples simple** - Focus on practical, common use cases.
- **Design intelligent tests** - Use shared utilities and keep tests focused.
- **Always test examples** - Every documented example must have a corresponding test.
- **Use unique codes** - Every example must have a unique code (module:sequential_number).
- **Use unwrap for Results** - Always use `unwrap(result)` to validate Result types.
- **Check vitest.config.ts first** - Always review available test projects before running tests.
- **Document modules independently** - Avoid cross-module assumptions in documentation.
- **Minimize interface documentation** - Focus on contracts, not implementations.
- **Use @inheritDoc for implementations** - Reference interface docs when appropriate.
- **No console.log in examples** - Use comments to show expected output.
- **Respect line length limits** - Follow codebase standards for character limits.
